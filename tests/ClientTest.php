<?php

namespace Ypho\Scryfall\Tests;

use Exception;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\ServerException;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use Ypho\Scryfall\Client;
use PHPUnit\Framework\TestCase;
use Ypho\Scryfall\Endpoints\CardEndpoint;
use Ypho\Scryfall\Endpoints\SetEndpoint;
use Ypho\Scryfall\Endpoints\SymbologyEndpoint;
use Ypho\Scryfall\Exception\ScryfallException;

class ClientTest extends TestCase
{
    protected \GuzzleHttp\Client $mockedGuzzleClient;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->mockedGuzzleClient = $this->createMock(\GuzzleHttp\Client::class);
    }

    public function testSets()
    {
        $apiClient = new Client($this->mockedGuzzleClient);
        $endpoint = $apiClient->sets();

        $this->assertInstanceOf(SetEndpoint::class, $endpoint);
    }

    public function testCards()
    {
        $apiClient = new Client($this->mockedGuzzleClient);
        $endpoint = $apiClient->cards();

        $this->assertInstanceOf(CardEndpoint::class, $endpoint);
    }

    public function testSymbology()
    {
        $apiClient = new Client($this->mockedGuzzleClient);
        $endpoint = $apiClient->symbology();

        $this->assertInstanceOf(SymbologyEndpoint::class, $endpoint);
    }

    /**
     * @throws ScryfallException
     */
    public function testFetchResponse()
    {
        $mockResponse = file_get_contents(__DIR__ . '/../examples/json/set_all.json');
        $mockHandler = new MockHandler([
            new Response(200, [], $mockResponse),
        ]);

        $handlerStack = HandlerStack::create($mockHandler);
        $mockedGuzzleClient = new \GuzzleHttp\Client(['handler' => $handlerStack]);

        $apiClient = new Client($mockedGuzzleClient);
        $response = $apiClient->fetchResponse('/yo-mama');

        $this->assertSame(json_decode($mockResponse, true), $response);
    }

    public function testFetchResponseWithClientException()
    {
        $mockResponse = file_get_contents(__DIR__ . '/../examples/json/set_not_found.json');
        $mockHandler = new MockHandler([
            new ClientException(
                'Not found',
                new Request('GET', 'sets/non-existing'),
                new Response(404, [], $mockResponse)
            ),
        ]);

        $handlerStack = HandlerStack::create($mockHandler);
        $mockedGuzzleClient = new \GuzzleHttp\Client(['handler' => $handlerStack]);

        $apiClient = new Client($mockedGuzzleClient);

        $this->expectException(ScryfallException::class);
        $this->expectExceptionCode(404);

        $apiClient->fetchResponse('sets/non-existing');
    }

    public function testFetchResponseWithGuzzleException()
    {
        $mockHandler = new MockHandler([
            new ServerException(
                'Bad Gateway',
                new Request('GET', 'some-url'),
                new Response(502, [])
            ),
        ]);

        $handlerStack = HandlerStack::create($mockHandler);
        $mockedGuzzleClient = new \GuzzleHttp\Client(['handler' => $handlerStack]);

        $apiClient = new Client($mockedGuzzleClient);

        $this->expectException(ScryfallException::class);
        $this->expectExceptionCode(502);

        $apiClient->fetchResponse('sets/non-existing');
    }

    public function testFetchResponseWithOtherException()
    {
        $mockHandler = new MockHandler([
            new Exception(
                'I\'m a teapot',
                418
            ),
        ]);

        $handlerStack = HandlerStack::create($mockHandler);
        $mockedGuzzleClient = new \GuzzleHttp\Client(['handler' => $handlerStack]);

        $apiClient = new Client($mockedGuzzleClient);

        $this->expectException(ScryfallException::class);
        $this->expectExceptionCode(418);

        $apiClient->fetchResponse('sets/non-existing');
    }

    public function testGenerateParameterString()
    {
        $apiClient = new Client($this->mockedGuzzleClient);

        // Create a Reflection Class, and set the method to accessible
        $reflection = new \ReflectionClass(Client::class);
        $method = $reflection->getMethod('generateParameterString');
        $method->setAccessible(true);

        // Run method
        $generationResult = $method->invokeArgs($apiClient, [['hello' => 'world', 'boolean' => true]]);
        $this->assertSame('?hello=world&boolean=true', $generationResult);
    }
}
